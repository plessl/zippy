$Id: TODO 462 2006-02-02 14:12:48Z plessl $


-Code cleanup

-Case studies:
 - try to generate temporal partitioned netlists, comparison FIR with virtuali-
   zed execution vs. FIR with temporal partitioning

---------------------------------------------------------------------------
Known Bugs/Limitations (fix ASAP)
---------------------------------------------------------------------------


Output registers treated wrongly in some cases:
---------------------------------------------------------------------------
Specifying an output register in the ZNF file doen't work correctly. The Configuration generator treats the output like an input for that case.
  --> a test case that exposes this problem is given in
      Benchmarks/ZNF/fir2_outputreg.ZNF


Implement function to check validity of a placement wrt routability. Since the
 Zippy architecture is rather scarce in routing resources, many placements are
 simply unroutable.
 Idea:
   -compute for each cell, which cells can be reached at all with given routing
   -check for any new placement (e.g. generated by simulated annealing based 
   placer) whether the placement is routable at all, re-iterate if not


Historical costs in Pathfinder algorithm:
Think about historical cost once again. How shall the historical congestion 
information be aggregated?

ZNF: Check netlist for unique netnames

Let netlist and net keep track of routes directly, e.g.
 nelist->addNet
 netlist->getUnroutedNets
 netlist->setRouteForNet

Set routingstatus attribute of unrouted nets to ROUTER_UNROUTED when reading a 
unplaced and unrouted netlist.

Routing, Cell input output naming:
 * Think about where the netlist locations shall be mapped to routing locations
 * Should this be done in the router, immediately before routing, or should the 
   netlist class have method for converting netlist notation to routing notation,
   i.e. translating c_0_0 to c_i_0_0 if it is the sink of a net.


Debugging:
 * Debug output is pretty messy, make the level of detail for debug output 
   customizable
  



---------------------------------------------------------------------------
General Enhancements (near time goals)
---------------------------------------------------------------------------


----------------------------------------------------------------------------
Concrete Todos:
----------------------------------------------------------------------------
Netlist::Net
 * Net class is overly complicated since all wires of a net share a single source.
 * Simplify Net class
 
 
 
Visualization:
 *	Implement automatic diplay of placed and routed netlists
 *	support highlighting of congestion
 *	Ideas: Use SVG, Problem: How to find a good SVG viewer, which is cross-plattform
 *	Batik seems not to bad although its written in Java. The major problem seems
    to find a good way of integrating Batik with Perl 
	

---------------------------------------------------------------------------
Long Term Goals:
---------------------------------------------------------------------------

Think about a more general way of architecture description:
 * More object oriented
 * Objects could be cells, wires, buses, multiplexers
 * Architecture could be described by instantiation and wiring of theses objects
 * Generate all tools from this description


---------------------------------------------------------------------------
Completed TODOs:
---------------------------------------------------------------------------

Implement heuristics for initial placement. Do a topological sort of netlist, 
 starting with primary inputs. (For exact topological sort, the netlist should 
 be represented as a true hypergraph, which is not exactly the case so far)
  hypergraph=an edge can connect a multitute of nodes

Router:
 * Memory leak in router, due to memory leak in Heap::Fibonacci
 * Found a memory leak in Heap::Fibonacci and reported it to the maintainer.
   Fix was provided by maintainer.

Placer:
 *	Find a good way for placing the netlists
 *	It's likely, that a simulated annealing based approach could work
 *	Find a good initial placement and try to route it, then, successively try 
	to optimize routing
	
Allow Cells to be also used for routing:
 * Cells can be used for routing if they are unused.

Netlist reader
 * Define a netlist format that can be read by the Netlist classes. Specifying 
   netlists by hand is a very tedious and errorprone process
 * Do a little research on netlists formats, maybe a common netlist format can
   be reused e.g. blif/edif/xnf

Tools::Attributable 
 * Create a class that provides a general set/get attribute mechanism that all 
   other classes can use
 * This will eliminate a lot of redundant code, since many zippytools classes 
   make use of this generic set/get attribute mechnism
   
Fix handling of unroutable nets:
 * It seems as if the Dijkstra implementation in the router assigns a weight of
   zero to sinks that are not reachable, which is a bad thing.
   

